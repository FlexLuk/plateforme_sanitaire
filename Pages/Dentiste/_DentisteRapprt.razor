@page "/rapport_dentiste"
@layout DentisteLayout

@using LYRA.Controllers.ControllerFichiste
@using LYRA.Models
@using LYRA.Controllers.ControllerSecretaire
@using LYRA.Shared
@using Blazored.Toast
@using Blazored.Toast.Services
@using Blazored.Toast.Configuration
@using System.Globalization
@using System.Web
@using LYRA.Data
@using LYRA.Shared.Dentiste
@using LYRA.Shared.Fichiste
@using Newtonsoft.Json
@using System.Text
@inject NavigationManager NavigationManager
@inject IAdhesionService adhesionService
@inject IAffiliationService affiliService
@inject IFichisteService fichisteService
@inject Blazored.Toast.Services.IToastService toastService
@inject IJSRuntime iJSRuntime
@inject HttpClient _httpClient
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@attribute [Authorize(Roles = "Dentiste, Admin")]

<AuthorizeView Roles="Dentiste, Admin">
    <Authorized>
        <div class="card card-info mb-4">
            <div class="card-header">
                <h5 class="card-title mb-0">RAPPORT DENTISTE</h5>
            </div>
            <div class="card-body">
                <RadzenCard class="mb-4">
                    <h5 class="text-center font-weight-bold text-muted text-uppercase small">Rapport journalier</h5>
                    <hr class="m-0 mb-2" />
                    <div class="row">
                        <div class="col-12 col-sm-4">
                            <div class="info-box bg-light p-2 fa-border" style="font-size:1.5em">
                                <div class="info-box-content">
                                    <span class="info-box-text text-center text-muted">Tous les patiants</span>
                                </div>
                                <RadzenButton Click="@(async()=>await ExportAllJour())" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Small" Text="Exporter en excel" Style="border-radius:0px; width:100%" />
                            </div>
                        </div>
                        <div class="col-12 col-sm-4">
                            <div class="info-box bg-light p-2 fa-border" style="font-size:1.5em">
                                <div class="info-box-content">
                                    <span class="info-box-text text-center text-muted">Employers seulement</span>
                                </div>
                                <RadzenButton Click="@(async()=>await ExportTravJour())" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Small" Text="Exporter en excel" Style="border-radius:0px; width:100%" />
                            </div>
                        </div>
                        <div class="col-12 col-sm-4">
                            <div class="info-box bg-light p-2 fa-border" style="font-size:1.5em">
                                <div class="info-box-content">
                                    <span class="info-box-text text-center text-muted">Familles seulement :</span>
                                </div>
                                <RadzenButton Click="@(async()=>await ExportFamJour())" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Small" Text="Exporter en excel" Style="border-radius:0px; width:100%" />
                            </div>
                        </div>
                    </div>
                </RadzenCard>
                <RadzenCard>
                    <h5 class="text-center font-weight-bold text-muted text-uppercase small ">Rapport personnaliser</h5>
                    <hr class="m-0 mb-2" />
                    <div class="row">
                        <div class="col">
                            <div style="padding:10px;" class="bg-light">

                                @*<div class="row">*@
                                <div class="form-check form-switch ml-5">
                                    <input class="form-check-input" type="checkbox" id="flexSwitchCheckChecked" checked="@checkedJournalier" onchange="@(()=>ChangeRapportType())">
                                    <label class="form-check-label mt-1" for="flexSwitchCheckChecked">@textTwoDate</label>
                                </div>
                                @*</div*@
                                <div class="w-100">
                                    @if (checkedJournalier == true)
                                    {
                                            <div class="mt-2 mb-2">
                                                <RadzenDatePicker AllowClear="true" class="w-100 " @bind-Value="@dateRapport1" DateFormat="d"
                                                          Placeholder="Date debut" />
                                            </div>
                                            <div class="mt-2 mb-2">
                                                <RadzenDatePicker AllowClear="true" class="w-100" @bind-Value="@dateRapport2" DateFormat="d"
                                                          Placeholder="Date fin" />
                                            </div>
                                    }
                                    else if (checkedJournalier == false)
                                    {
                                            <div class="mt-2 mb-2">
                                                <RadzenDatePicker AllowClear="true" class="w-100" @bind-Value="@dateRapport" DateFormat="d"
                                                          Placeholder="Specifier la date a exporter" />
                                            </div>

                                    }
                                </div>
                            </div>
                        </div>
                        <div class="col bg-light" style="padding:10px;">
                            <div class="form-check form-switch ml-5 mb-3">
                            </div>
                            <div class="row">
                                <div class="col">
                                    <RadzenCheckBox TValue="bool" />
                                    <label>Travailleur</label>
                                </div>
                                <div class="col">
                                    <RadzenCheckBox TValue="bool" />
                                    <label>Famille</label>
                                </div>
                                <div class="col">
                                    <RadzenCheckBox TValue="bool" />
                                    <label>Par etablissement</label>
                                </div>
                            </div>
                            <div class="row">
                            </div>
                        </div>
                    </div>
                    <div class="mt-2 mb-2 w-100">
                        <button class="btn btn-sm btn-outline-success" onclick="@(()=>ExportInDate(checkedJournalier))" type="button"><span class="fas fa-file-excel"></span> &ensp; Exporter en excel</button>
                    </div>
                </RadzenCard>
                <!-- /input-group -->
            </div>
            <!-- /.card-body -->
        </div>
    </Authorized>
    <NotAuthorized>

    </NotAuthorized>
</AuthorizeView>

@code {
    Fichiste fichiste = new();
    IEnumerable<Fichiste> fichistes = new List<Fichiste>();
    IEnumerable<FichisteModel> fichisteCustoms = new List<FichisteModel>();
    string textTwoDate;
    DateTime? dateRapport1;
    DateTime? dateRapport2;
    DateTime? dateRapport;
    bool checkedJournalier = false;

    public void ChangeRapportType()
    {
        if (checkedJournalier == true)
        {
            textTwoDate = "Rapport journalier a une date";
            checkedJournalier = false;
        }
        else if (checkedJournalier == false)
        {
            textTwoDate = "Rapport entre deux date";
            checkedJournalier = true;
        }
        StateHasChanged();
    }

    protected override void OnInitialized() => ChangeRapportType();

    public async Task ExportAllJour()
    {
        var reponse = await _httpClient.GetAsync(NavigationManager.BaseUri + "api/FichisteExport/DownloadAllJournalier");
        reponse.EnsureSuccessStatusCode();
        var fileBytes = await reponse.Content.ReadAsByteArrayAsync();
        var fileName = $"FichisteTout--{DateTime.Now.ToString("dd-MM-yyyy", System.Globalization.CultureInfo.InvariantCulture)}.xlsx";
        await iJSRuntime.InvokeAsync<object>("saveAsFile", fileName, Convert.ToBase64String(fileBytes));
    }

    public async Task ExportFamJour()
    {
        var reponse = await _httpClient.GetAsync(NavigationManager.BaseUri + "api/FichisteExport/DownloadFamJournalier");
        reponse.EnsureSuccessStatusCode();
        var fileBytes = await reponse.Content.ReadAsByteArrayAsync();
        var fileName = $"FichisteFamille--{DateTime.Now.ToString("dd-MM-yyyy", System.Globalization.CultureInfo.InvariantCulture)}.xlsx";
        await iJSRuntime.InvokeAsync<object>("saveAsFile", fileName, Convert.ToBase64String(fileBytes));
    }

    public async Task ExportTravJour()
    {
        var reponse = await _httpClient.GetAsync(NavigationManager.BaseUri + "api/FichisteExport/DownloadTravJournalier");
        reponse.EnsureSuccessStatusCode();
        var fileBytes = await reponse.Content.ReadAsByteArrayAsync();
        var fileName = $"FichisteTravilleur--{DateTime.Now.ToString("dd-MM-yyyy", System.Globalization.CultureInfo.InvariantCulture)}.xlsx";
        await iJSRuntime.InvokeAsync<object>("saveAsFile", fileName, Convert.ToBase64String(fileBytes));
    }

    public async void ExportInDate(bool entreDeuxDate)
    {
        if (entreDeuxDate)
        {
            await ExportEntreDeuxDate();
        }
        else
        {
            await ExportDateSpecifique();
        }
    }

    public async Task ExportEntreDeuxDate()
    {
        DateClass dateClass = new();
        dateClass.d1 = dateRapport1.Value.ToShortDateString();
        dateClass.d2 = dateRapport2.Value.ToShortDateString();
        var json = JsonConvert.SerializeObject(dateClass);
        var data = new StringContent(json, Encoding.UTF8, "application/json");
        var url = new Uri(NavigationManager.BaseUri + "api/FichisteExport/DownloadAllInTwoDate");
        using var client = new HttpClient();
        var response = await client.PostAsync(url, data);
        response.EnsureSuccessStatusCode();
        var fileBytes = await response.Content.ReadAsByteArrayAsync();
        var fileName = $"FichisteTravilleur--{DateTime.Now.ToString("dd-MM-yyyy", System.Globalization.CultureInfo.InvariantCulture)}.xlsx";
        await iJSRuntime.InvokeAsync<object>("saveAsFile", fileName, Convert.ToBase64String(fileBytes));
    }

    public async Task ExportDateSpecifique()
    {
        DateClass dateClass = new();
        dateClass.d0 = dateRapport.Value.ToShortDateString();
        var json = JsonConvert.SerializeObject(dateClass);
        var data = new StringContent(json, Encoding.UTF8, "application/json");
        var url = new Uri(NavigationManager.BaseUri + "api/FichisteExport/DownloadAllInDate");
        using var client = new HttpClient();
        var response = await client.PostAsync(url, data);
        response.EnsureSuccessStatusCode();
        var fileBytes = await response.Content.ReadAsByteArrayAsync();
        var fileName = $"FichisteTravilleur--{DateTime.Now.ToString("dd-MM-yyyy", System.Globalization.CultureInfo.InvariantCulture)}.xlsx";
        await iJSRuntime.InvokeAsync<object>("saveAsFile", fileName, Convert.ToBase64String(fileBytes));

    }

    class DateClass
    {
        public string? d0 { get; set; }
        public string? d1 { get; set; }
        public string? d2 { get; set; }
    }

}
