@page "/consultation_dentiste"
@using LYRA.Shared.Dentiste
@layout DentisteLayout

@using LYRA.Controllers.ControllerFichiste
@using LYRA.Controllers.ControllerDentiste
@using LYRA.Models
@using LYRA.Models.Administration
@using LYRA.Models.Examens
@using LYRA.Controllers.ControllerSecretaire
@using LYRA.Shared
@using Blazored.Toast
@using Blazored.Toast.Services
@using Blazored.Toast.Configuration
@using System.Globalization
@using System.Web
@using LYRA.Shared.Fichiste
@inject NavigationManager NavigationManager
@inject IAdhesionService adhesionService
@inject IAffiliationService affiliService
@inject IFichisteService fichisteService
@inject IDentisteService dentisteService
@inject Blazored.Toast.Services.IToastService toastService
@inject IDentisteService dentisteService
@inject IJSRuntime JsRuntime
@inject NavigationManager Go
@attribute [Authorize(Roles = "Dentiste, Admin")]

<AuthorizeView Roles="Dentiste, Admin">
    <Authorized>
        <div class="card card-info mb-2">
            <div class="card-header">
                <h5 class="card-title mb-0">LISTE PASSAGE DENTISTE</h5>
            </div>
            <div class="card-body" style="width:1060px">
                @if (fichistes == null)
                {
                    <Loading />
                }
                else
                {
                    <RadzenGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced"
                            AllowPaging="true" PageSize="9" AllowSorting="true" Responsive="true" Data="@dentisteModel"
                            TItem="ListDentiste" OrOperatorText="Ou" ContainsText="contient" StartsWithText="commencer par"
                            EndsWithText="terminer par" EqualsText="égal à" NotEqualsText="différent de" LessThanOrEqualsText="<="
                            AndOperatorText="et" FilterText="Filtre" ClearFilterText="effacer" GreaterThanOrEqualsText=">="
                            ApplyFilterText="appliquer" PageSizeText="Page" ColumnWidth="140px" GreaterThanText=">" LessThanText="<"
                            SelectionMode="DataGridSelectionMode.Single" EmptyText="Aucune donnée trouvée">
                        <Columns>
                            <RadzenGridColumn TItem="ListDentiste" Property="date" Title="Date" Sortable=false>
                            </RadzenGridColumn>
                            <RadzenGridColumn TItem="ListDentiste" Property="NumOsiet" Title="N° OSIET" Width="5.5rem" Sortable=false>
                            </RadzenGridColumn>
                            <RadzenGridColumn TItem="ListDentiste" Property="nom" Title="Nom" Width="12rem">
                            </RadzenGridColumn>
                            <RadzenGridColumn TItem="ListDentiste" Property="age" Title="Age" Width="3rem" Filterable=false Sortable=false>
                            </RadzenGridColumn>
                            <RadzenGridColumn TItem="ListDentiste" Property="dent" Title="N° Dent" Width="3.5rem" Filterable=false Sortable=false>
                            </RadzenGridColumn>
                            <RadzenGridColumn TItem="ListDentiste" Title="Cas" Filterable=false Sortable=false Width="6rem">
                                <Template Context="data">
                                    @if(data.Cas.Trim() == "0"){
                                        <span>Nouveau cas</span>
                                    }else{
                                        <span>ancien cas</span>
                                    }
                                </Template>
                            </RadzenGridColumn>
                            <RadzenGridColumn TItem="ListDentiste" Property="type" Title="Type" Sortable=false Width="5.5rem">
                            </RadzenGridColumn>
                            <RadzenGridColumn TItem="ListDentiste" Property="rdv" Title="Rendez-vous" Sortable=false>
                            </RadzenGridColumn>
                            <RadzenGridColumn TItem="ListDentiste" Sortable=false Filterable=false Width="5rem">
                                <Template Context="dentists">
                                    <RadzenButton Click="@(()=>Go.NavigateTo("/dentiste/"+dentists.FichisteId))" ButtonStyle="ButtonStyle.Secondary" Text="Consulter" Size="ButtonSize.Small" title="Consulter" />
                                </Template>
                            </RadzenGridColumn>
                        </Columns>
                    </RadzenGrid>
                }
            </div>
        </div>
    </Authorized>
    <NotAuthorized>

    </NotAuthorized>
</AuthorizeView>

@code {
    Fichiste? fichiste = new();
    List<Fichiste>? fichistes = new List<Fichiste>();
    List<Dentiste>? dentistes = new List<Dentiste>();
    List<ListDentiste>? dentisteModel = new List<ListDentiste>();
    string? numOsiet, Nom, Etablissement, nomDossier;
    Employer employer = new();
    Famille famille = new();
    int age;

    protected override async Task OnInitializedAsync() => await LoadFichisteListes();

    public async Task LoadFichisteListes()
    {
        await LoadDentiste();
        StateHasChanged();
    }

    private async Task LoadDentiste()
    {
        dentistes = await dentisteService.GetAllDentiste();
        foreach (var item in dentistes)
        {
            fichiste = await fichisteService.getFichisteById(item.Fichisteid.Value);
            if (fichiste.Categorie == "Travailleur")
            {
                await GetEmployer(Convert.ToInt16(fichiste.Affiliationid));
            }
            else if (fichiste.Categorie == "Famille")
            {
                await GetFamille(Convert.ToInt16(fichiste.Affiliationid));
            }
            ListDentiste lsModel = new();
            lsModel.date = item.Date;
            lsModel.terminer = item.Terminer;
            lsModel.prescripteur = item.Prescripteur;
            lsModel.rdv = item.Rendez_vous;
            lsModel.etablissement = Etablissement;
            lsModel.age = age;
            lsModel.Cas = item.Cas + "";
            lsModel.dent = item.numDent;    
            lsModel.nom = Nom;
            lsModel.NumOsiet = numOsiet;
            lsModel.type = item.Type;
            lsModel.FichisteId = item.Fichisteid;
            dentisteModel.Add(lsModel);
        }
    }

    public async Task GetFamille(int familleID)
    {
        famille = await affiliService.GetFamilleById(familleID);
        if (famille != null)
        {
            employer = await affiliService.GetEmployerByNumOsiet(famille.Numeroosiet);
            if (employer != null)
            {
                numOsiet = famille.Numeroosiet;
                Nom = famille.Nom + " " + famille.Prenom;
            }
        }
    }

    public async Task GetEmployer(int employerID)
    {
        employer = await affiliService.GetEmployerById(employerID);
        if (employer != null)
        {
            numOsiet = employer.Numeroosiet;
            Nom = employer.Nom + " " + employer.Prenom;
        }
    }
}