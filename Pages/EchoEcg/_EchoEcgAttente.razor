@page "/echoecg_attente"
@layout EchoEcgLayout
@using LYRA.Controllers.ComtrollerMedecin
@using LYRA.Controllers.ControllerExamens
@using LYRA.Controllers.ControllerFichiste
@using LYRA.Controllers.ControllerMaternite
@using LYRA.Controllers.ControllerSecretaire
@using LYRA.Controllers.ControllerUtilisateur
@using LYRA.Models.Maternites
@using LYRA.Shared.EchoEcg
@using LYRA.Shared.Medecin
@using LYRA.Models
@using LYRA.Models.Administration
@using LYRA.Models.Examens
@inject IMedecinService medecinService
@inject ILocalStorageService _localStorageService
@inject IUtilisateurService uService
@inject IFichisteService fichisteService
@inject IExamenService examenService
@inject IAdhesionService adhesionService
@inject IAffiliationService affiliationService
@inject IMaterniteService materniteService
@inject NavigationManager go
@inject Radzen.DialogService DialogService

<AuthorizeView Roles="Admin, EchoEcg">
    <Authorized>
        <div class="card" style="border-radius: 0">
            <div class="card-header">
                <h4 class="m-0">ECHO / ECG Liste d'attente</h4>
            </div>
            <div class="card-body">
                @if (ready == false)
                {
                    <Loading />
                }
                else
                {
                    <div class="container">
                        <div class="row">
                            <div class="col-auto w-100 border border-secondary">
                                <div class="">
                                    <h5 class="mt-2 mb-0">Nouveau</h5>
                                </div>

                                <hr class="mt-2" />

                                <table class="table table-hover table-responsive table-bordered table-secondary align-middle">
                                    <thead>
                                        <tr>
                                            <th>N° du jour</th>
                                            <th>Nom</th>
                                            <th>Prenom</th>
                                            <th>Service</th>
                                            <th></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (ready)
                                        {
                                            @foreach (var item in attentes)
                                            {
                                                <tr>
                                                    <td>@item.numjour</td>
                                                    <td>@item.nom</td>
                                                    <td>@item.prenom</td>
                                                    <td>@item.service</td>
                                                    <td>
                                                        @if (item.service == "Maternité")
                                                        {
                                                            <button onclick="@(()=>go.NavigateTo("/echo_maternite/"+item.idMaternite))" class="btn btn-sm btn-outline-success">Entrer</button>
                                                        }else{
                                                            <button onclick="@(()=>Traiter(item.idFichiste))" class="btn btn-sm btn-outline-success">Entrer</button>
                                                        }
                                                       
                                                    </td>
                                                </tr>
                                            }
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                    <div class="container mt-4">
                        <div class="row">
                            <div class="col-auto w-100 border border-secondary">
                                <div class="">
                                    <h5 class="mt-2 mb-0">En cours</h5>
                                </div>

                                <hr class="mt-2" />


                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    bool ready;
    IEnumerable<Utilisateur> utilisateurs = new List<Utilisateur>();
    string emailAddress = "";
    List<EchoEcg> echoEcgs = new List<EchoEcg>();
    List<Attente> attentes = new List<Attente>();
    Employer employer = new();
    Employeur employeur = new();
    Famille famille = new();
    string? demande, numOsiet, Nom, Prenom, Etablissement, categorie, _type, _type_echo;
    int age;
    Cpn cpn = new();
    Maternite maternite = new();

    public async Task Traiter(long idFichiste)
    {
        go.NavigateTo("/echo_ecg/" + idFichiste);
    }

    protected async override void OnInitialized()
    {
        ready = false;
        emailAddress = await _localStorageService.GetItemAsync<string>("emailAddress");
        await GetListAttente();
        ready = true;
        await InvokeAsync(StateHasChanged);

    }
    List<EchoMaternite> echoMaternites = new List<EchoMaternite>();

    public async Task GetListAttente()
    {
        echoEcgs = await examenService.GetAllEchoEcgNonTerminer();
        echoMaternites = await materniteService.GetEchoMaterniteNonTerminer();
        foreach (var item in echoEcgs)
        {
            if (item.Fichisteid != null)
            {
                Fichiste fichiste = await fichisteService.getFichisteById(item.Fichisteid.Value);
                if (fichiste.Categorie == "Famille")
                {
                    await GetFamille(Convert.ToInt32(fichiste.Affiliationid), fichiste);
                }
                else if (fichiste.Categorie == "Travailleur")
                {
                    await GetEmployer(Convert.ToInt32(fichiste.Affiliationid), fichiste);
                }
                Attente att = new();
                att.numjour = fichiste.Numjour;
                att.nom = Nom;
                att.prenom = Prenom;
                att.idFichiste = fichiste.Fichisteid;
                attentes.Add(att);
            }
        }
        foreach (var item in echoMaternites)
        {
            if (item.FichisteId != null)
            {
                Fichiste fichiste = await fichisteService.getFichisteById(item.FichisteId.Value);
                if (fichiste.Categorie == "Famille")
                {
                    await GetFamille(Convert.ToInt32(fichiste.Affiliationid), fichiste);
                }
                else if (fichiste.Categorie == "Travailleur")
                {
                    await GetEmployer(Convert.ToInt32(fichiste.Affiliationid), fichiste);
                }
                Attente att = new();
                att.numjour = fichiste.Numjour;
                att.nom = Nom;
                att.prenom = Prenom;
                att.service = "Maternité";
                att.idFichiste = fichiste.Fichisteid;
                att.idMaternite = item.CpnId;
                attentes.Add(att);
            }
        }
    }

    public async Task LoadUtilisateur() => utilisateurs = await uService.GetAllUtilisateur();

    class Attente
    {
        public int numjour { get; set; }
        public string? nom { get; set; }
        public string? prenom { get; set; }
        public string? service { get; set; }
        public long idFichiste { get; set; }
        public long? idMaternite { get; set; }
    }
    public async Task GetFamille(int familleID, Fichiste fichiste)
    {
        famille = await affiliationService.GetFamilleById(familleID);
        if (famille.Numeroosiet != null)
        {
            employer = await affiliationService.GetEmployerByNumOsiet(famille.Numeroosiet);
            if (employer.Numemployeur != null)
            {
                employeur = await adhesionService.GetEmployeurByEmployer(employer.Numemployeur);
                numOsiet = famille.Numeroosiet;
                Nom = famille.Nom;
                Prenom = famille.Prenom;
                Etablissement = employeur.Raisonsociale;
                categorie = fichiste.Categorie;
                if (famille.Datenaissance != null)
                {
                    int dateNaissance = famille.Datenaissance.Value.Year;
                    int currentDate = DateTime.Now.Year;
                    age = currentDate - dateNaissance;
                }
            }

        }
    }

    public async Task GetEmployer(int employerID, Fichiste fichiste)
    {
        employer = await affiliationService.GetEmployerById(employerID);
        if (employer.Numemployeur != null)
        {
            employeur = await adhesionService.GetEmployeurByEmployer(employer.Numemployeur);
            numOsiet = employer.Numeroosiet;
            Nom = employer.Nom;
            Prenom = employer.Prenom;
            Etablissement = employeur.Raisonsociale;
            categorie = fichiste.Categorie;
            if (employer.Datenaissance != null)
            {
                int dateNaissance = employer.Datenaissance.Value.Year;
                int currentDate = DateTime.Now.Year;
                age = currentDate - dateNaissance;
            }
        }
    }
}